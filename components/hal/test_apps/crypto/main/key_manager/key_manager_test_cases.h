/*
 * SPDX-FileCopyrightText: 2025 Espressif Systems (Shanghai) CO LTD
 *
 * SPDX-License-Identifier: Unlicense OR CC0-1.0
 */
#include <stdint.h>

#define TEST_COUNT 5

typedef struct test_xts_data {
    uint16_t data_size;
    uint32_t data_offset;
    uint8_t ciphertext[128];
} test_xts_data_t;

typedef struct test_ecdsa_data {
    uint8_t pubx[32];
    uint8_t puby[32];
} test_ecdsa_data_t;

typedef struct test_data {
    uint8_t init_key[32];
    uint8_t k2_info[64];
    uint8_t k1_encrypted[2][32];  // For both 256-bit and 512-bit keys
    uint8_t plaintext_data[128];
    test_xts_data_t xts_test_data[TEST_COUNT];
    test_ecdsa_data_t ecdsa_test_data;
} test_data_aes_mode_t;

typedef struct test_data_ecdh0 {
    uint8_t plaintext_data[128];
    uint8_t k1[2][32];
    uint8_t k1_G[2][64];
} test_data_ecdh0_mode_t;

// For 32-byte k1 key
test_data_aes_mode_t test_data_xts_aes_128 = {
    .init_key = { 0x3d, 0x61, 0x0f, 0xe7, 0x3b, 0x11, 0xd1, 0xac, 0x90, 0xda, 0xc8, 0xd7, 0x36, 0xa2, 0x3e, 0x5f, 0x50, 0x3d, 0xa3, 0xc4, 0x26, 0x0e, 0x9f, 0xf5, 0xf9, 0x56, 0x5a, 0x7c, 0xb2, 0x2a, 0xed, 0x00 },
    .k2_info = { 0x53, 0x1f, 0x3c, 0x3d, 0xee, 0xb9, 0xdc, 0x22, 0xb9, 0x89, 0x94, 0x60, 0x30, 0x25, 0x02, 0xf0, 0x42, 0x32, 0xfd, 0x80, 0xfe, 0xe9, 0xfc, 0x0c, 0xc8, 0x6d, 0xa6, 0xe0, 0x99, 0x3b, 0x4f, 0xdd, 0x9c, 0x9a, 0x01, 0x99, 0xe3, 0x69, 0x23, 0xb9, 0xf9, 0xe4, 0x19, 0x66, 0x0b, 0xed, 0xf3, 0x71, 0x68, 0x0a, 0x15, 0x19, 0x7c, 0x17, 0x96, 0x9d, 0xbf, 0x0b, 0xcb, 0x75, 0x2d, 0x05, 0xc1, 0xc3 },
    .k1_encrypted = { { 0x3f, 0xe8, 0xd7, 0x74, 0x8d, 0xe4, 0xc2, 0x1c, 0x8f, 0x52, 0x5b, 0x3d, 0xa5, 0x9d, 0x43, 0x09, 0xef, 0x26, 0x76, 0x24, 0xfc, 0x3c, 0xc5, 0x3a, 0x84, 0xa2, 0x4c, 0x71, 0xf8, 0xd6, 0x8d, 0xb5 }, {  } },
    .plaintext_data = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80 },
    .xts_test_data = {
		{.data_size = 32, .data_offset = 0x160000, .ciphertext = {0x7b, 0xe2, 0xcb, 0x71, 0x0f, 0x86, 0x48, 0xef, 0x79, 0x69, 0x5f, 0x68, 0xa4, 0xf6, 0xec, 0x56, 0xb5, 0xc1, 0x09, 0xaf, 0x3e, 0x33, 0x05, 0x03, 0x16, 0x1b, 0xf2, 0x9f, 0xc2, 0x8d, 0x0c, 0xec}},
		{.data_size = 64, .data_offset = 0x160100, .ciphertext = {0x0d, 0x7d, 0x25, 0xb8, 0x85, 0x55, 0x56, 0xb4, 0xa8, 0x33, 0xf6, 0x9f, 0x0b, 0x00, 0xe7, 0x6d, 0x87, 0x06, 0xfe, 0x48, 0xdb, 0x61, 0x60, 0x59, 0x88, 0x03, 0xc0, 0x0d, 0xe4, 0xa7, 0xdc, 0xcd, 0x37, 0x3e, 0x17, 0x30, 0x04, 0xde, 0x79, 0x74, 0x7a, 0x30, 0x61, 0xf9, 0x64, 0x8b, 0x5d, 0x50, 0x84, 0xfe, 0x09, 0x5b, 0xb8, 0x9e, 0x65, 0xf9, 0x4d, 0xbc, 0x63, 0x3a, 0x4f, 0x97, 0x37, 0x8a}},
		{.data_size = 128, .data_offset = 0x160200, .ciphertext = {0x0d, 0x16, 0x41, 0x83, 0xdf, 0x75, 0x45, 0x2f, 0x4e, 0x34, 0x9f, 0x8a, 0x81, 0x93, 0x98, 0x88, 0xd4, 0xd5, 0x05, 0xec, 0x6c, 0x5f, 0xb0, 0xd7, 0xea, 0xdc, 0x05, 0xf2, 0xf3, 0x27, 0xe7, 0x5f, 0x6d, 0xec, 0x67, 0x17, 0x5c, 0x79, 0x4e, 0xc4, 0x4f, 0x9d, 0xa8, 0x4e, 0x16, 0x06, 0xc6, 0xf5, 0x4d, 0xae, 0xb9, 0xfc, 0x9a, 0x9c, 0x16, 0x0a, 0xf2, 0x49, 0x38, 0xeb, 0x3a, 0x6a, 0x72, 0x53, 0xb6, 0x32, 0x3b, 0xef, 0xd2, 0x18, 0x82, 0x17, 0x67, 0x72, 0xa2, 0xa1, 0xd2, 0x53, 0xf8, 0x84, 0x24, 0xda, 0x03, 0xf8, 0x34, 0xd6, 0x19, 0x3e, 0x89, 0xe4, 0x4c, 0x1a, 0x32, 0xfe, 0x99, 0x3c, 0x39, 0xf1, 0x00, 0x87, 0x26, 0x9c, 0xee, 0x36, 0xc1, 0x1b, 0x2e, 0x0e, 0x5e, 0xe7, 0xbe, 0x25, 0xa6, 0x39, 0xda, 0x56, 0xa8, 0x4a, 0x75, 0x88, 0x62, 0xf9, 0x9d, 0x06, 0x8f, 0x15, 0xfb, 0x37}},
		{.data_size = 16, .data_offset = 0x160300, .ciphertext = {0xa9, 0xad, 0x71, 0x0f, 0x78, 0xdc, 0x0a, 0x54, 0xc0, 0xaa, 0xba, 0x0b, 0xc7, 0x27, 0x92, 0xbd}},
		{.data_size = 32, .data_offset = 0x160400, .ciphertext = {0xc9, 0xf0, 0xf9, 0xf1, 0x66, 0x20, 0x13, 0xb3, 0xbf, 0xcc, 0x98, 0x85, 0x30, 0x43, 0x29, 0xd6, 0xa5, 0x16, 0x92, 0xa6, 0xae, 0x2f, 0xd8, 0x55, 0x83, 0x4c, 0xe6, 0xf3, 0x1c, 0xd4, 0xc1, 0x71}},
	}
};

// For 64-byte k1 key
test_data_aes_mode_t test_data_xts_aes_256 = {
	.init_key = {0x3d, 0x61, 0x0f, 0xe7, 0x3b, 0x11, 0xd1, 0xac, 0x90, 0xda, 0xc8, 0xd7, 0x36, 0xa2, 0x3e, 0x5f, 0x50, 0x3d, 0xa3, 0xc4, 0x26, 0x0e, 0x9f, 0xf5, 0xf9, 0x56, 0x5a, 0x7c, 0xb2, 0x2a, 0xed, 0x00},
	.k2_info = {0x53, 0x1f, 0x3c, 0x3d, 0xee, 0xb9, 0xdc, 0x22, 0xb9, 0x89, 0x94, 0x60, 0x30, 0x25, 0x02, 0xf0, 0x42, 0x32, 0xfd, 0x80, 0xfe, 0xe9, 0xfc, 0x0c, 0xc8, 0x6d, 0xa6, 0xe0, 0x99, 0x3b, 0x4f, 0xdd, 0x9c, 0x9a, 0x01, 0x99, 0xe3, 0x69, 0x23, 0xb9, 0xf9, 0xe4, 0x19, 0x66, 0x0b, 0xed, 0xf3, 0x71, 0x68, 0x0a, 0x15, 0x19, 0x7c, 0x17, 0x96, 0x9d, 0xbf, 0x0b, 0xcb, 0x75, 0x2d, 0x05, 0xc1, 0xc3},
	.k1_encrypted = {{0x79, 0x5c, 0x35, 0x1d, 0x4f, 0x04, 0x90, 0x88, 0x9a, 0x99, 0xc3, 0x6c, 0x08, 0x21, 0x96, 0x42, 0xd6, 0x8a, 0xd6, 0x96, 0x0f, 0x3b, 0x34, 0xd1, 0x5f, 0x0a, 0xb8, 0xba, 0xf6, 0x1a, 0xb8, 0x5b}, {0x50, 0x9f, 0x98, 0xf3, 0x69, 0x5b, 0x86, 0xd6, 0x25, 0x00, 0x44, 0x9f, 0x14, 0xba, 0xb8, 0xc5, 0x38, 0x79, 0xea, 0x65, 0xcd, 0x1f, 0x5f, 0x40, 0xdf, 0xa1, 0x0b, 0x4c, 0xe6, 0x8f, 0x7e, 0x8c}},
	.plaintext_data = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80},
    .xts_test_data = {
        {.data_size = 32, .data_offset = 0x160000, .ciphertext = {0x78, 0x21, 0xf8, 0x05, 0x4c, 0x9b, 0x48, 0x5f, 0x5d, 0x2e, 0x03, 0x5a, 0xdd, 0x39, 0xa7, 0x99, 0x4c, 0x70, 0xb4, 0x37, 0x87, 0x03, 0xa2, 0xd1, 0x4b, 0x48, 0x19, 0x39, 0xc4, 0x54, 0xec, 0x30}},
        {.data_size = 64, .data_offset = 0x160100, .ciphertext = {0xfa, 0x69, 0x67, 0x90, 0x93, 0x79, 0x24, 0xc3, 0x0c, 0xd9, 0xe6, 0x97, 0x85, 0xc5, 0xc4, 0x0a, 0xa8, 0x50, 0x2b, 0xac, 0x0b, 0xa6, 0x7e, 0x4c, 0x10, 0xff, 0xde, 0x3c, 0xd3, 0x24, 0xbf, 0x8b, 0xe3, 0x2f, 0x92, 0x89, 0x9a, 0xcf, 0x33, 0xb9, 0x7f, 0x69, 0x39, 0x2c, 0x29, 0xcf, 0x7f, 0xfd, 0x0f, 0x8d, 0xff, 0x74, 0x90, 0x1c, 0xec, 0xeb, 0xec, 0xd9, 0x4b, 0xd7, 0xba, 0x1f, 0x23, 0x14}},
        {.data_size = 128, .data_offset = 0x160200, .ciphertext = {0xcc, 0x07, 0xb5, 0x64, 0xfd, 0xf1, 0xe8, 0x28, 0x52, 0x3c, 0x4b, 0x69, 0xe9, 0x59, 0x56, 0x02, 0x3a, 0xc1, 0x52, 0x34, 0xd2, 0x77, 0x14, 0x86, 0xa8, 0x1a, 0x4b, 0x3a, 0x3c, 0xd6, 0xd6, 0xf3, 0x4f, 0x00, 0x69, 0x81, 0x92, 0x38, 0x81, 0x20, 0x7f, 0x37, 0x44, 0xdf, 0x2f, 0x28, 0x33, 0x4e, 0xc6, 0x7f, 0x73, 0x52, 0xb5, 0x57, 0x6d, 0x12, 0xf7, 0xb6, 0x1f, 0xd8, 0x1a, 0xa0, 0x2e, 0xf7, 0x04, 0xa1, 0xd1, 0xee, 0x57, 0x1d, 0x6e, 0xcb, 0x9d, 0xb7, 0x9d, 0xac, 0x72, 0x59, 0x35, 0x0e, 0x4c, 0xb8, 0x16, 0x6e, 0xa9, 0x6e, 0xfd, 0xc8, 0x82, 0xc2, 0xe8, 0x6f, 0x54, 0xef, 0x3e, 0xa8, 0x17, 0xa1, 0x7f, 0x9c, 0x04, 0xdb, 0xd7, 0x3c, 0x40, 0x38, 0xd9, 0x31, 0xa5, 0x49, 0x25, 0x69, 0x3c, 0x8e, 0xaf, 0x2e, 0x02, 0x3b, 0xbe, 0x5c, 0x8a, 0x70, 0x69, 0xe1, 0x19, 0x4c, 0x1c, 0xa9}},
        {.data_size = 16, .data_offset = 0x160300, .ciphertext = {0x67, 0x24, 0x58, 0xaf, 0x4a, 0xdb, 0x6e, 0xc8, 0xcb, 0xe5, 0xa1, 0x63, 0xbd, 0xb0, 0x18, 0x47}},
        {.data_size = 32, .data_offset = 0x160400, .ciphertext = {0x66, 0xc3, 0x02, 0x76, 0xfb, 0xf3, 0x58, 0xff, 0x75, 0xa7, 0x68, 0x32, 0xd0, 0x65, 0x76, 0xfc, 0x9c, 0x15, 0x73, 0x8f, 0x16, 0xa0, 0xa7, 0x3c, 0xf0, 0x84, 0x35, 0x77, 0x97, 0xd5, 0xbb, 0xd2}},
    }
};

test_data_aes_mode_t test_data_ecdsa = {
    .init_key = { 0x3d, 0x61, 0x0f, 0xe7, 0x3b, 0x11, 0xd1, 0xac, 0x90, 0xda, 0xc8, 0xd7, 0x36, 0xa2, 0x3e, 0x5f, 0x50, 0x3d, 0xa3, 0xc4, 0x26, 0x0e, 0x9f, 0xf5, 0xf9, 0x56, 0x5a, 0x7c, 0xb2, 0x2a, 0xed, 0x00 },
    .k2_info = { 0x53, 0x1f, 0x3c, 0x3d, 0xee, 0xb9, 0xdc, 0x22, 0xb9, 0x89, 0x94, 0x60, 0x30, 0x25, 0x02, 0xf0, 0x42, 0x32, 0xfd, 0x80, 0xfe, 0xe9, 0xfc, 0x0c, 0xc8, 0x6d, 0xa6, 0xe0, 0x99, 0x3b, 0x4f, 0xdd, 0x9c, 0x9a, 0x01, 0x99, 0xe3, 0x69, 0x23, 0xb9, 0xf9, 0xe4, 0x19, 0x66, 0x0b, 0xed, 0xf3, 0x71, 0x68, 0x0a, 0x15, 0x19, 0x7c, 0x17, 0x96, 0x9d, 0xbf, 0x0b, 0xcb, 0x75, 0x2d, 0x05, 0xc1, 0xc3 },
    .k1_encrypted = { { 0x3f, 0xe8, 0xd7, 0x74, 0x8d, 0xe4, 0xc2, 0x1c, 0x8f, 0x52, 0x5b, 0x3d, 0xa5, 0x9d, 0x43, 0x09, 0xef, 0x26, 0x76, 0x24, 0xfc, 0x3c, 0xc5, 0x3a, 0x84, 0xa2, 0x4c, 0x71, 0xf8, 0xd6, 0x8d, 0xb5 }, {  } },
    .ecdsa_test_data = {
        .pubx = { 0x50, 0xbe, 0xd3, 0xae, 0x26, 0x29, 0x43, 0x71, 0xba, 0xd0, 0xda, 0x24, 0xe9, 0x17, 0x5b, 0xd8, 0x0f, 0xe3, 0x77, 0x81, 0x2c, 0x62, 0x98, 0x53, 0x78, 0x3c, 0x9c, 0x14, 0x3a, 0x31, 0xa6, 0xbd },
        .puby = { 0x6c, 0xf7, 0x5d, 0x68, 0xd3, 0xb0, 0x45, 0xc5, 0xdb, 0xdc, 0xf6, 0x9a, 0xf0, 0x3b, 0x0a, 0x47, 0x18, 0xf5, 0x51, 0x92, 0xdb, 0x22, 0x03, 0xc2, 0x10, 0xa8, 0x24, 0x09, 0xff, 0x9d, 0x9c, 0x94 }
    }
};


test_data_ecdh0_mode_t test_data_ecdh0 = {
    .plaintext_data = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80 },
    .k1 = {
        { 0x8e, 0xb5, 0x60, 0xaf, 0x8c, 0x8b, 0xa4, 0x8c, 0x0d, 0x0d, 0x57, 0x74, 0xad, 0xab, 0x7b, 0x5e, 0x72, 0x75, 0x7b, 0x84, 0x4e, 0x83, 0x89, 0x0f, 0x7b, 0xc6, 0xd6, 0x85, 0xed, 0xf3, 0x74, 0xc8 },
        { 0x8e, 0xb5, 0x60, 0xaf, 0x8c, 0x8b, 0xa4, 0x8c, 0x0d, 0x0d, 0x57, 0x74, 0xad, 0xab, 0x7b, 0x5e, 0x72, 0x75, 0x7b, 0x84, 0x4e, 0x83, 0x89, 0x0f, 0x7b, 0xc6, 0xd6, 0x85, 0xed, 0xf3, 0x74, 0xc8 },
    },
    .k1_G = {
        { 0x50, 0xbe, 0xd3, 0xae, 0x26, 0x29, 0x43, 0x71, 0xba, 0xd0, 0xda, 0x24, 0xe9, 0x17, 0x5b, 0xd8, 0x0f, 0xe3, 0x77, 0x81, 0x2c, 0x62, 0x98, 0x53, 0x78, 0x3c, 0x9c, 0x14, 0x3a, 0x31, 0xa6, 0xbd, 0x6c, 0xf7, 0x5d, 0x68, 0xd3, 0xb0, 0x45, 0xc5, 0xdb, 0xdc, 0xf6, 0x9a, 0xf0, 0x3b, 0x0a, 0x47, 0x18, 0xf5, 0x51, 0x92, 0xdb, 0x22, 0x03, 0xc2, 0x10, 0xa8, 0x24, 0x09, 0xff, 0x9d, 0x9c, 0x94 },
        { 0x50, 0xbe, 0xd3, 0xae, 0x26, 0x29, 0x43, 0x71, 0xba, 0xd0, 0xda, 0x24, 0xe9, 0x17, 0x5b, 0xd8, 0x0f, 0xe3, 0x77, 0x81, 0x2c, 0x62, 0x98, 0x53, 0x78, 0x3c, 0x9c, 0x14, 0x3a, 0x31, 0xa6, 0xbd, 0x6c, 0xf7, 0x5d, 0x68, 0xd3, 0xb0, 0x45, 0xc5, 0xdb, 0xdc, 0xf6, 0x9a, 0xf0, 0x3b, 0x0a, 0x47, 0x18, 0xf5, 0x51, 0x92, 0xdb, 0x22, 0x03, 0xc2, 0x10, 0xa8, 0x24, 0x09, 0xff, 0x9d, 0x9c, 0x94 },
    }
};
